knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
results = 'hide',
fig.show = 'hide',
fig.pos = 'H',
tidy = TRUE,
cache = FALSE
)
## Loading the Required Libraries:
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(deSolve)
library(ggplot2)
library(dplyr)
# Define the model (Model V)
sir_model_v <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S + I + R
lambda <- lambda0 * exp(-mu * time)
f <- (alpha * I) / (gamma + I + S)
dS <- b * (kappa - N) - lambda * S - f
dI <- lambda * S - d * I
dR <- d * I
return(list(c(dS, dI, dR)))
})
}
# Initial conditions
state <- c(S = 0, I = 0, R = 0)
# Parameter values from Table 2 for Model V (high density)
parameters <- c(
b = 1.467,
kappa = 5.743,
lambda0 = 0.499,
mu = 0.247,
alpha = 2.106,
gamma = 0.026,
d = 0.058
)
# Time points (thermal time in degree days)
times <- seq(0, 14, by = 0.1)
# Solve the ODE
out <- as.data.frame(ode(y = state, times = times, func = sir_model_v, parms = parameters))
head(out)
# Plot the results
plot(out$time, out$S, type = "l", col = "blue", ylim = c(0,6), ylab = "Stem Count", xlab = "Thermal Time")
lines(out$time, out$I, col = "red")
legend("topright", legend = c("Susceptible (S)", "Infected (I)"), col = c("blue", "red"), lty = 1)
# Your estimated data (thermal time and observed S, I)
data_obs <- data.frame(
time = c(0, 2.3505, 3.6495, 5.0103, 6.1237, 7.2371, 11.6907),
I_obs = c(0, 3.2836, 1.4030, 1.0149, 1.0149, 1.0149, 1.1045),
S_obs = c(0, 1.5958, 2.8119, 3.2122, 3.1145, 2.8975, 1.9895)
)
# Objective function: sum of squared errors
rss_function <- function(par) {
names(par) <- c("b", "kappa", "lambda0", "mu", "alpha", "gamma", "d")
state <- c(S = 0, I = 0, R = 0)
times <- data_obs$time
out <- as.data.frame(ode(y = state, times = times, func = sir_model_v, parms = par))
pred <- out[, c("S", "I")]
rss_S <- sum((data_obs$S_obs - out$S)^2)
rss_I <- sum((data_obs$I_obs - out$I)^2)
rss <- sum((data_obs$S - pred$S)^2 + (data_obs$I - pred$I)^2)
return(rss)
}
# Initial guess for the parameters
init_guess <- c(
b = 1.467, kappa = 5.743, lambda0 = 0.499,
mu = 0.247, alpha = 2.106, gamma = 0.026, d = 0.058
)
# Fit the model
fit <- optim(init_guess, fn = rss_function, method = "L-BFGS-B",
lower = rep(0.0001, 7), control = list(maxit = 1000))
# Show fitted parameters
best_fit_params <- fit$par
print(best_fit_params, 5)
# Get RSS value
print(paste("Best RSS:", fit$value))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
results = 'hide',
fig.show = 'hide',
fig.pos = 'H',
tidy = TRUE,
cache = FALSE
)
## Loading the Required Libraries:
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(deSolve)
library(ggplot2)
library(dplyr)
# Define the model (Model V)
sir_model_v <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S + I + R
lambda <- lambda0 * exp(-mu * time)
f <- (alpha * I) / (gamma + I + S)
dS <- b * (kappa - N) - lambda * S - f
dI <- lambda * S - d * I
dR <- d * I
return(list(c(dS, dI, dR)))
})
}
# Initial conditions
state <- c(S = 0, I = 0, R = 0)
# Parameter values from Table 2 for Model V (high density)
parameters <- c(
b = 1.467,
kappa = 5.743,
lambda0 = 0.499,
mu = 0.247,
alpha = 2.106,
gamma = 0.026,
d = 0.058
)
# Time points (thermal time in degree days)
times <- seq(0, 14, by = 0.1)
# Solve the ODE
out <- as.data.frame(ode(y = state, times = times, func = sir_model_v, parms = parameters))
head(out)
# Plot the results
plot(out$time, out$S, type = "l", col = "blue", ylim = c(0,6), ylab = "Stem Count", xlab = "Thermal Time")
lines(out$time, out$I, col = "red")
legend("topright", legend = c("Susceptible (S)", "Infected (I)"), col = c("blue", "red"), lty = 1)
# Your estimated data (thermal time and observed S, I)
data_obs <- data.frame(
time = c(0, 2.3505, 3.6495, 5.0103, 6.1237, 7.2371, 11.6907),
I_obs = c(0, 3.2836, 1.4030, 1.0149, 1.0149, 1.0149, 1.1045),
S_obs = c(0, 1.5958, 2.8119, 3.2122, 3.1145, 2.8975, 1.9895)
)
# Objective function: sum of squared errors
rss_function <- function(par) {
names(par) <- c("b", "kappa", "lambda0", "mu", "alpha", "gamma", "d")
state <- c(S = 0, I = 0, R = 0)
times <- data_obs$time
out <- as.data.frame(ode(y = state, times = times, func = sir_model_v, parms = par))
pred <- out[, c("S", "I")]
rss_S <- sum((data_obs$S_obs - out$S)^2)
rss_I <- sum((data_obs$I_obs - out$I)^2)
rss <- sum((data_obs$S - pred$S)^2 + (data_obs$I - pred$I)^2)
return(rss)
}
# Initial guess for the parameters
init_guess <- c(
b = 1.467, kappa = 5.743, lambda0 = 0.499,
mu = 0.247, alpha = 2.106, gamma = 0.026, d = 0.058
)
# Fit the model
fit <- optim(init_guess, fn = rss_function, method = "L-BFGS-B",
lower = rep(0.0001, 7), control = list(maxit = 1000))
# Show fitted parameters
best_fit_params <- fit$par
print(best_fit_params, 5)
# Get RSS value
print(paste("Best RSS:", fit$value))
# Cost function: returns RSS for S and I separately
state <- c(S = 0, I = 0, R = 0)
times <- data_obs$time
output <- as.data.frame(ode(y = state, times = times,
func = sir_model_v,
parms = best_fit_params))
rss_S <- sum((data_obs$S_obs - output$S)^2)
rss_I <- sum((data_obs$I_obs - output$I)^2)
cat("RSS for S:", round(rss_S, 5), "\nRSS for I:", round(rss_I, 5))
library(ggplot2)
# Plot for Susceptible
p_s <- ggplot() +
geom_line(data = output, aes(x = time, y = S), color = "blue", size = 1) +
geom_point(data = data_obs, aes(x = time, y = S_obs), color = "black", shape = 17, size = 3) +
labs(title = "Susceptible Stems: Model V vs Observed",
x = "Time", y = "Susceptible (S)") +
theme_minimal()
p_s
# Plot for Infected
p_i <- ggplot() +
geom_line(data = output, aes(x = time, y = I), color = "red", size = 1) +
geom_point(data = data_obs, aes(x = time, y = I_obs), color = "black", shape = 17, size = 3) +
labs(title = "Infected Stems: Model V vs Observed",
x = "Time", y = "Infected (I)") +
theme_minimal()
p_i
residuals_S <- data_obs$S_obs - output$S
residuals_I <- data_obs$I_obs - output$I
plot(data_obs$time, residuals_S, type="b", col="blue", main="Residuals: S", ylab="Residual", xlab="Time")
plot(data_obs$time, residuals_I, type="b", col="red", main="Residuals: I", ylab="Residual", xlab="Time")
# Sensitivity analysis for each parameter using finite differences
sensitivity_analysis <- function(base_params, param_names, epsilon = 1e-3) {
base_state <- c(S = 0, I = 0, R = 0)
times <- seq(0, 14, by = 0.1)
base_out <- as.data.frame(ode(y = base_state, times = times, func = sir_model_v, parms = base_params))
sensitivities <- list()
for (pname in param_names) {
perturbed <- base_params
perturbed[pname] <- perturbed[pname] + epsilon
perturbed_out <- as.data.frame(ode(y = base_state, times = times, func = sir_model_v, parms = perturbed))
dS <- (perturbed_out$S - base_out$S) / epsilon
dI <- (perturbed_out$I - base_out$I) / epsilon
sensitivities[[pname]] <- data.frame(time = times, dS = dS, dI = dI)
}
return(sensitivities)
}
# Run sensitivity analysis
param_names <- names(best_fit_params)
sensitivity_results <- sensitivity_analysis(best_fit_params, param_names)
# Plot sensitivity for Susceptible stems
library(tidyr)
for (pname in names(sensitivity_results)) {
df <- sensitivity_results[[pname]]
plot(df$time, df$dS, type = "l", col = "blue", lwd = 2,
main = paste("Sensitivity of S to", pname),
ylab = "∂S/∂θ", xlab = "Time")
}
# Plot sensitivity for Infected stems
for (pname in names(sensitivity_results)) {
df <- sensitivity_results[[pname]]
plot(df$time, df$dI, type = "l", col = "red", lwd = 2,
main = paste("Sensitivity of I to", pname),
ylab = "∂I/∂θ", xlab = "Time")
}
# Extract max absolute sensitivities for each parameter
library(tibble)
summary_df <- tibble(
Parameter = names(sensitivity_results),
Max_dS = sapply(sensitivity_results, function(df) max(abs(df$dS))),
Max_dI = sapply(sensitivity_results, function(df) max(abs(df$dI)))
)
# Melt for ggplot
library(tidyr)
summary_long <- pivot_longer(summary_df, cols = c(Max_dS, Max_dI), names_to = "Output", values_to = "MaxSensitivity")
# Rename for nicer plot
summary_long$Output <- recode(summary_long$Output, Max_dS = "Susceptible (S)", Max_dI = "Infected (I)")
# Plot
library(ggplot2)
ggplot(summary_long, aes(x = Parameter, y = MaxSensitivity, fill = Output)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Maximum Sensitivity of Model Outputs to Parameters",
y = "Max |∂Output/∂Parameter|",
x = "Model Parameter") +
theme_minimal() +
scale_fill_manual(values = c("steelblue", "tomato"))
# Create residuals in tidy format
library(tidyr)
residuals_df <- data_obs %>%
left_join(output, by = "time") %>%
mutate(
S_residual = S_obs - S,
I_residual = I_obs - I
) %>%
select(time, S_residual, I_residual) %>%
pivot_longer(cols = c(S_residual, I_residual),
names_to = "Compartment", values_to = "Residual") %>%
mutate(Compartment = recode(Compartment,
S_residual = "Susceptible (S)",
I_residual = "Infected (I)"))
# Plot residuals
ggplot(residuals_df, aes(x = time, y = Residual, color = Compartment)) +
geom_point(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuals – Model V Fit",
x = "Time",
y = "Observed - Model") +
theme_minimal()
# Values of 'b' to test around the base value (Model V high density value: 1.467)
b_values <- c(1.0, 1.467, 1.9)
colors <- c("red", "green", "blue")
# Store results
results_b <- list()
# Time points
times <- seq(0, 14, by = 0.1)
# Loop through b values
for (b in b_values) {
params_b <- best_fit_params
params_b["b"] <- b
out_b <- as.data.frame(ode(y = c(S = 0, I = 0, R = 0),
times = times,
func = sir_model_v,
parms = params_b))
out_b$b_value <- b
results_b[[as.character(b)]] <- out_b
}
# Combine into one data frame
sensitivity_b_df <- bind_rows(results_b)
# Plot for Susceptible (S)
ggplot(sensitivity_b_df, aes(x = time, y = S, color = factor(b_value))) +
geom_line(size = 1) +
labs(title = "Sensitivity to b (Stem Production Rate)",
subtitle = "Effect of b on Susceptible (S)",
x = "Time", y = "Susceptible",
color = "b value") +
theme_minimal()
# Plot for Infected (I)
ggplot(sensitivity_b_df, aes(x = time, y = I, color = factor(b_value))) +
geom_line(size = 1) +
labs(title = "Sensitivity to b (Stem Production Rate)",
subtitle = "Effect of b on Infected (I)",
x = "Time", y = "Infected",
color = "b value") +
theme_minimal()
library(ggplot2)
# Plot for Susceptible
p_s <- ggplot() +
geom_line(data = output, aes(x = time, y = S), color = "blue", size = 1) +
geom_point(data = data_obs, aes(x = time, y = S_obs), color = "black", shape = 17, size = 3) +
labs(title = "Susceptible Stems: Model V vs Observed",
x = "Time", y = "Susceptible (S)") +
theme_minimal()
p_s
# Plot for Infected
p_i <- ggplot() +
geom_line(data = output, aes(x = time, y = I), color = "red", size = 1) +
geom_point(data = data_obs, aes(x = time, y = I_obs), color = "black", shape = 17, size = 3) +
labs(title = "Infected Stems: Model V vs Observed",
x = "Time", y = "Infected (I)") +
theme_minimal()
p_i
